function isWebBluetoothEnabled() {
  if (navigator.bluetooth) {
    return true;
  } else {
    LoggerBox.setStatus('Web Bluetooth API is not available.\n' +
      'Please make sure the "Experimental Web Platform features" flag is enabled.');
    return false;
  }
}

characteristicUuidToServiceUuidMap = {};

async function getInfo() {
  let serviceUuidsListEl = document.querySelector('#serviceUuidsList')
  serviceUuidsListEl.innerHTML = '';
  let characteristicUuidsListEl = document.querySelector('#characteristicUuidsList')
  serviceUuidsListEl.innerHTML = '';
  // Validate services UUID entered by user first.
  let optionalServices = document.querySelector('#optionalServices').value
    .split(/, ?/).map(s => s.startsWith('0x') ? parseInt(s) : s)
    .filter(s => s && BluetoothUUID.getService);

  try {
    LoggerBox.log('Requesting any Bluetooth Device...');
    const device = await navigator.bluetooth.requestDevice({
      acceptAllDevices: true,
      optionalServices: optionalServices
    });

    LoggerBox.log('Connecting to GATT Server...');
    const server = await device.gatt.connect();

    LoggerBox.log('Getting Services...');
    const services = await server.getPrimaryServices();

    LoggerBox.log('Getting Characteristics...');
    for (const service of services) {
      LoggerBox.log('> Service: ' + service.uuid);

      let serviceOptionEl = document.createElement('option');
      serviceUuidsListEl.setAttribute('value', service.uuid);
      serviceOptionEl.innerText = service.uuid;
      serviceUuidsListEl.appendChild(serviceOptionEl);

      const characteristics = await service.getCharacteristics();

      characteristics.forEach(characteristic => {
        LoggerBox.log('>> Characteristic: ' + characteristic.uuid + ' ' +
          getSupportedProperties(characteristic));

        let characteristicOptionEl = document.createElement('option');
        characteristicUuidsListEl.setAttribute('value', characteristic.uuid);
        characteristicOptionEl.innerText = characteristic.uuid;
        characteristicUuidsListEl.appendChild(characteristicOptionEl);

      });
    }
  } catch (error) {
    LoggerBox.log('Argh! ' + error);
  }
}

function getSupportedProperties(characteristic) {
  let supportedProperties = [];
  for (const p in characteristic.properties) {
    if (characteristic.properties[p] === true) {
      supportedProperties.push(p.toUpperCase());
    }
  }
  return '[' + supportedProperties.join(', ') + ']';
}

document.querySelector('form#getInfo').addEventListener('submit', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    // LoggerBox.clearLog();
    getInfo();
  }
});