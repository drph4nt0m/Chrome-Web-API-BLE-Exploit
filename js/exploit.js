var charExploit;
var targetDevice;

async function exploitWrite() {
  ChromeSamples.log("Exploited...");

  let exploitHexStream = document.querySelector('#exploitHexStream').value;

  let res = await charExploit.writeValue(exploitHexStream);

  ChromeSamples.log("Exploited!");
  ChromeSamples.log(res);
}

async function exploitRead() {
  ChromeSamples.log("Exploited...");

  let res = await charExploit.readValue();

  console.log(charExploit);

  ChromeSamples.log("Exploited!");
  ChromeSamples.log(res);
}


function device_connect() {
  let serviceUuid = document.querySelector('#serviceUuid').value;
  let characteristicUuid = document.querySelector('#characteristicUuid').value

  navigator.bluetooth.requestDevice({
      acceptAllDevices: true,
      optionalServices: [serviceUuid]
    })
    .then(device => {
      targetDevice = device;
      return device.gatt.connect();
    })
    .then(server => {
      ChromeSamples.log("Device connected");
      return server.getPrimaryService(serviceUuid);
    })
    .then(service => {
      return service.getCharacteristic(characteristicUuid);
    })
    .then(characteristic => {
      charExploit = characteristic;
    })
    .catch(error => {
      ChromeSamples.log('Error! ' + error);
    });
}

function device_disconnect() {
  if (targetDevice.gatt.connected) {
    targetDevice.gatt.disconnect();
    ChromeSamples.log("Device disconnected");
  }
}

document.querySelector('button#connect').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    device_connect();
    }
});

document.querySelector('button#exploitWrite').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    exploitWrite();
  }
});

document.querySelector('button#exploitRead').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    exploitRead();
  }
});

document.querySelector('button#disconnect').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    device_disconnect();
  }
});