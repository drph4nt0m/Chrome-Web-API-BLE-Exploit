var charExploit;
var targetDevice;

async function exploitWrite() {
  LoggerBox.log("Exploiting...");

  let exploitHexStream = document.querySelector('#exploitHexStream').value.split('');

  if (exploitHexStream.length % 2 != 0) {
    LoggerBox.log("Hex Stream should be of even length");
    return;
  }
  
  let buffer = [];

  for (let i = 0; i < exploitHexStream.length; i += 2) {
    buffer.push(`0x${exploitHexStream[i]}${exploitHexStream[i+1]}`)
  }

  let writedata = Uint8Array.from(buffer);

  let res = await charExploit.writeValue(writedata);

  LoggerBox.log("Exploited!");
  LoggerBox.log(res);
}

async function exploitRead() {
  LoggerBox.log("Exploiting...");

  let res = await charExploit.readValue();

  console.log(charExploit);

  LoggerBox.log("Exploited!");
  LoggerBox.log(res);
}


function device_connect() {
  let serviceUuid = document.querySelector('#serviceUuid').value;
  let characteristicUuid = document.querySelector('#characteristicUuid').value

  navigator.bluetooth.requestDevice({
      acceptAllDevices: true,
      optionalServices: [serviceUuid]
    })
    .then(device => {
      targetDevice = device;
      return device.gatt.connect();
    })
    .then(server => {
      LoggerBox.log("Device connected");
      return server.getPrimaryService(serviceUuid);
    })
    .then(service => {
      return service.getCharacteristic(characteristicUuid);
    })
    .then(characteristic => {
      charExploit = characteristic;
    })
    .catch(error => {
      LoggerBox.log('error! ' + error);
    });
}

function device_disconnect() {
  if (targetDevice.gatt.connected) {
    targetDevice.gatt.disconnect();
    LoggerBox.log("Device disconnected");
  }
}

document.querySelector('button#connect').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    device_connect();
    }
});

document.querySelector('button#exploitWrite').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    exploitWrite();
  }
});

document.querySelector('button#exploitRead').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    exploitRead();
  }
});

document.querySelector('button#disconnect').addEventListener('click', function (event) {
  event.stopPropagation();
  event.preventDefault();

  if (isWebBluetoothEnabled()) {
    device_disconnect();
  }
});